#!/usr/bin/env python3
"""
Script para testar a conex√£o com SQL Server no Linux
"""

import sys
import pandas as pd
from sqlalchemy import create_engine, text
import urllib.parse

# Configura√ß√µes de conex√£o
DB_CONFIG = {
    'server': 'rio01p-sql01',
    'database': 'ControleTI',
    'username': 'RM',
    'password': 'rm',
    'port': '1433'
}

def test_connection():
    """Testa diferentes m√©todos de conex√£o"""
    
    password_encoded = urllib.parse.quote_plus(DB_CONFIG['password'])
    username_encoded = urllib.parse.quote_plus(DB_CONFIG['username'])
    
    # M√©todos de conex√£o para testar
    connection_methods = [
        {
            'name': 'pyodbc com FreeTDS',
            'string': f"mssql+pyodbc://{username_encoded}:{password_encoded}@{DB_CONFIG['server']}:{DB_CONFIG['port']}/{DB_CONFIG['database']}?driver=FreeTDS&TrustServerCertificate=yes"
        },
        {
            'name': 'pymssql',
            'string': f"mssql+pymssql://{username_encoded}:{password_encoded}@{DB_CONFIG['server']}:{DB_CONFIG['port']}/{DB_CONFIG['database']}"
        }
    ]
    
    for method in connection_methods:
        print(f"\nüîç Testando: {method['name']}")
        print(f"Connection string: {method['string'].replace(DB_CONFIG['password'], '***')}")
        
        try:
            engine = create_engine(method['string'])
            
            # Testa a conex√£o
            with engine.connect() as connection:
                result = connection.execute(text("SELECT @@VERSION as version, GETDATE() as server_time"))
                row = result.fetchone()
                
                print(f"‚úÖ Conex√£o bem-sucedida!")
                print(f"üìä Vers√£o do SQL Server: {row[0][:100]}...")
                print(f"üïê Hora do servidor: {row[1]}")
                
                # Testa uma query simples do seu banco
                try:
                    result = connection.execute(text("SELECT TOP 5 * FROM INFORMATION_SCHEMA.TABLES"))
                    tables = result.fetchall()
                    print(f"üìã Primeiras 5 tabelas encontradas:")
                    for table in tables:
                        print(f"   - {table[2]} (Schema: {table[1]})")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Erro ao listar tabelas: {e}")
                
                return engine, method['name']
                
        except Exception as e:
            print(f"‚ùå Falha: {e}")
            continue
    
    print("\n‚ùå Nenhum m√©todo de conex√£o funcionou!")
    return None, None

if __name__ == "__main__":
    print("üöÄ Testando conex√£o com SQL Server no Linux...")
    print(f"üéØ Servidor: {DB_CONFIG['server']}:{DB_CONFIG['port']}")
    print(f"üóÉÔ∏è  Database: {DB_CONFIG['database']}")
    print(f"üë§ Usu√°rio: {DB_CONFIG['username']}")
    
    engine, method = test_connection()
    
    if engine:
        print(f"\nüéâ Sucesso! Use o m√©todo: {method}")
        print("‚ú® Sua aplica√ß√£o deve funcionar agora!")
    else:
        print("\nüí° Sugest√µes:")
        print("1. Verifique se o servidor SQL Server est√° acess√≠vel:")
        print(f"   telnet {DB_CONFIG['server']} {DB_CONFIG['port']}")
        print("2. Confirme as credenciais de acesso")
        print("3. Verifique se o firewall permite conex√µes na porta 1433")
        print("4. Considere usar um banco de dados local (SQLite) para desenvolvimento")
